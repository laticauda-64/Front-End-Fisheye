@mixin select {
    display: flex;
    align-items: center;
    padding: 10px 0;
    position: relative;

    .isActive &__selectCustom__options {
        display: block;
    }

    .isActive &__selectCustom__trigger::after {
        transform: rotate(180deg);
    }

    &__label {
        font-size: 18px;
        font-weight: 700;
        padding-right: 50px;
    }

    &__wrapper {
        position: relative;
    }

    // Both native and custom selects must have the same width/height.
    &__selectNative,
    &__selectCustom {
        position: relative;
        width: 170px;
    }

    &__selectNative {
        -webkit-appearance: none;
        -moz-appearance: none;
        background-image: url("data:image/svg+xml;utf8,<svg fill='black' height='24' viewBox='0 0 24 24' width='24' xmlns='http://www.w3.org/2000/svg'><path d='M7 10l5 5 5-5z'/><path d='M0 0h24v24H0z' fill='none'/></svg>");
        background-repeat: no-repeat;
        background-position-x: 100%;
        background-position-y: 0.8rem;
        padding: 0rem 0.8rem;
        // test
    }

    &__selectNative,
    &__selectCustom__trigger {
        font-size: 18px;
        font-weight: 700;
        color: white;
        padding: 20px;
        width: 170px;
        height: 69px;
        border: none;
        background-color: var(--primary-dark-red);
        border-radius: 5px;
        cursor: pointer;
        display: flex;
        align-items: center;
    }

    &__selectCustom__trigger {
        position: relative;

        &::after {
            content: ' ';
            position: absolute;
            top: calc(50% - 10px);
            right: 0.8rem;
            width: 20px;
            height: 20px;
            background: url('../assets/icons/arrow.svg') center no-repeat;
            transition: transform 500ms;
        }
    }

    // Make sure the custom select does not mess with the layout
    &__selectCustom {
        position: absolute;
        top: 0;
        left: 0;
        display: none;

        &__option {
            position: relative;
            padding: 20px;
            padding-top: 23px;
            font-size: 18px;
            font-weight: 700;
            color: white;
            border-top: 1px solid #fff;
            height: 69px;

            &:first-child {
                border-top: none;
                border-radius: 5px 5px 0 0;

                &::after {
                    content: ' ';
                    position: absolute;
                    top: calc(50% - 10px);
                    right: 0.8rem;
                    width: 20px;
                    height: 20px;
                    background: url('../assets/icons/arrow.svg') center no-repeat;
                    transform: rotate(180deg);
                    animation: rotateArrow 500ms both;
                    @include rotateArrow;
                }
            }

            &:last-child {
                border-radius: 0 0 5px 5px;
            }

            &.isHover,
            &:hover {
                color: #000;
                background: var(--secondary-light-red);
                cursor: pointer;

                &::after {
                    background: url('../assets/icons/arrow-blk.svg') center no-repeat;
                }
            }

            &.isActive {
                // background-color: khaki;
                &::before {
                    content: 'âœ“';
                    font-size: 14px;
                    position: absolute;
                    left: 4px;
                    top: calc(50% - 7px);
                }
            }
        }

        &__options {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            border-radius: 5px;
            background-color: var(--primary-dark-red);
            z-index: 1;
            display: none;
        }
    }

    // This media query detects devices where the primary
    // input mechanism can hover over elements. (e.g. computers with a mouse)
    @media (hover: hover) {
        &__selectCustom {
            display: block;
        }
        // In a computer using keyboard? Then let's hide back the custom select
        // while the native one is focused:
        &__selectNative:focus + &__selectCustom {
            display: none;
        }
    }

    &__selectNative:focus,
    &__selectCustom.isActive &__selectCustom__trigger {
        outline: none;
    }
}
